// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdb-db/ent/akas"
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AkasUpdate is the builder for updating Akas entities.
type AkasUpdate struct {
	config
	hooks    []Hook
	mutation *AkasMutation
}

// Where appends a list predicates to the AkasUpdate builder.
func (au *AkasUpdate) Where(ps ...predicate.Akas) *AkasUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitleId sets the "titleId" field.
func (au *AkasUpdate) SetTitleId(s string) *AkasUpdate {
	au.mutation.SetTitleId(s)
	return au
}

// SetOrdering sets the "ordering" field.
func (au *AkasUpdate) SetOrdering(i int) *AkasUpdate {
	au.mutation.ResetOrdering()
	au.mutation.SetOrdering(i)
	return au
}

// AddOrdering adds i to the "ordering" field.
func (au *AkasUpdate) AddOrdering(i int) *AkasUpdate {
	au.mutation.AddOrdering(i)
	return au
}

// SetTitle sets the "title" field.
func (au *AkasUpdate) SetTitle(s string) *AkasUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetRegion sets the "region" field.
func (au *AkasUpdate) SetRegion(s string) *AkasUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetLanguage sets the "language" field.
func (au *AkasUpdate) SetLanguage(s string) *AkasUpdate {
	au.mutation.SetLanguage(s)
	return au
}

// SetTypes sets the "types" field.
func (au *AkasUpdate) SetTypes(s []string) *AkasUpdate {
	au.mutation.SetTypes(s)
	return au
}

// SetAttributes sets the "attributes" field.
func (au *AkasUpdate) SetAttributes(s []string) *AkasUpdate {
	au.mutation.SetAttributes(s)
	return au
}

// SetIsOriginalTitle sets the "isOriginalTitle" field.
func (au *AkasUpdate) SetIsOriginalTitle(b bool) *AkasUpdate {
	au.mutation.SetIsOriginalTitle(b)
	return au
}

// Mutation returns the AkasMutation object of the builder.
func (au *AkasUpdate) Mutation() *AkasMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AkasUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AkasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AkasUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AkasUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AkasUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AkasUpdate) check() error {
	if v, ok := au.mutation.Ordering(); ok {
		if err := akas.OrderingValidator(v); err != nil {
			return &ValidationError{Name: "ordering", err: fmt.Errorf(`ent: validator failed for field "Akas.ordering": %w`, err)}
		}
	}
	return nil
}

func (au *AkasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   akas.Table,
			Columns: akas.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: akas.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.TitleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldTitleId,
		})
	}
	if value, ok := au.mutation.Ordering(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: akas.FieldOrdering,
		})
	}
	if value, ok := au.mutation.AddedOrdering(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: akas.FieldOrdering,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldTitle,
		})
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldRegion,
		})
	}
	if value, ok := au.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldLanguage,
		})
	}
	if value, ok := au.mutation.Types(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: akas.FieldTypes,
		})
	}
	if value, ok := au.mutation.Attributes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: akas.FieldAttributes,
		})
	}
	if value, ok := au.mutation.IsOriginalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: akas.FieldIsOriginalTitle,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{akas.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AkasUpdateOne is the builder for updating a single Akas entity.
type AkasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AkasMutation
}

// SetTitleId sets the "titleId" field.
func (auo *AkasUpdateOne) SetTitleId(s string) *AkasUpdateOne {
	auo.mutation.SetTitleId(s)
	return auo
}

// SetOrdering sets the "ordering" field.
func (auo *AkasUpdateOne) SetOrdering(i int) *AkasUpdateOne {
	auo.mutation.ResetOrdering()
	auo.mutation.SetOrdering(i)
	return auo
}

// AddOrdering adds i to the "ordering" field.
func (auo *AkasUpdateOne) AddOrdering(i int) *AkasUpdateOne {
	auo.mutation.AddOrdering(i)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AkasUpdateOne) SetTitle(s string) *AkasUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetRegion sets the "region" field.
func (auo *AkasUpdateOne) SetRegion(s string) *AkasUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetLanguage sets the "language" field.
func (auo *AkasUpdateOne) SetLanguage(s string) *AkasUpdateOne {
	auo.mutation.SetLanguage(s)
	return auo
}

// SetTypes sets the "types" field.
func (auo *AkasUpdateOne) SetTypes(s []string) *AkasUpdateOne {
	auo.mutation.SetTypes(s)
	return auo
}

// SetAttributes sets the "attributes" field.
func (auo *AkasUpdateOne) SetAttributes(s []string) *AkasUpdateOne {
	auo.mutation.SetAttributes(s)
	return auo
}

// SetIsOriginalTitle sets the "isOriginalTitle" field.
func (auo *AkasUpdateOne) SetIsOriginalTitle(b bool) *AkasUpdateOne {
	auo.mutation.SetIsOriginalTitle(b)
	return auo
}

// Mutation returns the AkasMutation object of the builder.
func (auo *AkasUpdateOne) Mutation() *AkasMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AkasUpdateOne) Select(field string, fields ...string) *AkasUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Akas entity.
func (auo *AkasUpdateOne) Save(ctx context.Context) (*Akas, error) {
	var (
		err  error
		node *Akas
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AkasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Akas)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AkasMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AkasUpdateOne) SaveX(ctx context.Context) *Akas {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AkasUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AkasUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AkasUpdateOne) check() error {
	if v, ok := auo.mutation.Ordering(); ok {
		if err := akas.OrderingValidator(v); err != nil {
			return &ValidationError{Name: "ordering", err: fmt.Errorf(`ent: validator failed for field "Akas.ordering": %w`, err)}
		}
	}
	return nil
}

func (auo *AkasUpdateOne) sqlSave(ctx context.Context) (_node *Akas, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   akas.Table,
			Columns: akas.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: akas.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Akas.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, akas.FieldID)
		for _, f := range fields {
			if !akas.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != akas.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.TitleId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldTitleId,
		})
	}
	if value, ok := auo.mutation.Ordering(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: akas.FieldOrdering,
		})
	}
	if value, ok := auo.mutation.AddedOrdering(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: akas.FieldOrdering,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldRegion,
		})
	}
	if value, ok := auo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: akas.FieldLanguage,
		})
	}
	if value, ok := auo.mutation.Types(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: akas.FieldTypes,
		})
	}
	if value, ok := auo.mutation.Attributes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: akas.FieldAttributes,
		})
	}
	if value, ok := auo.mutation.IsOriginalTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: akas.FieldIsOriginalTitle,
		})
	}
	_node = &Akas{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{akas.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

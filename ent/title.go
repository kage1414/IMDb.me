// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"imdb-db/ent/title"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Title is the model entity for the Title schema.
type Title struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tconst holds the value of the "tconst" field.
	Tconst string `json:"tconst,omitempty"`
	// TitleType holds the value of the "titleType" field.
	TitleType string `json:"titleType,omitempty"`
	// PrimaryTitle holds the value of the "primaryTitle" field.
	PrimaryTitle string `json:"primaryTitle,omitempty"`
	// OriginalTitle holds the value of the "originalTitle" field.
	OriginalTitle string `json:"originalTitle,omitempty"`
	// IsAdult holds the value of the "isAdult" field.
	IsAdult bool `json:"isAdult,omitempty"`
	// StartYear holds the value of the "startYear" field.
	StartYear int `json:"startYear,omitempty"`
	// EndYear holds the value of the "endYear" field.
	EndYear int `json:"endYear,omitempty"`
	// RuntimeMinutes holds the value of the "runtimeMinutes" field.
	RuntimeMinutes int `json:"runtimeMinutes,omitempty"`
	// Genre holds the value of the "genre" field.
	Genre []string `json:"genre,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Title) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case title.FieldGenre:
			values[i] = new([]byte)
		case title.FieldIsAdult:
			values[i] = new(sql.NullBool)
		case title.FieldID, title.FieldStartYear, title.FieldEndYear, title.FieldRuntimeMinutes:
			values[i] = new(sql.NullInt64)
		case title.FieldTconst, title.FieldTitleType, title.FieldPrimaryTitle, title.FieldOriginalTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Title", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Title fields.
func (t *Title) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case title.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case title.FieldTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tconst", values[i])
			} else if value.Valid {
				t.Tconst = value.String
			}
		case title.FieldTitleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titleType", values[i])
			} else if value.Valid {
				t.TitleType = value.String
			}
		case title.FieldPrimaryTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primaryTitle", values[i])
			} else if value.Valid {
				t.PrimaryTitle = value.String
			}
		case title.FieldOriginalTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field originalTitle", values[i])
			} else if value.Valid {
				t.OriginalTitle = value.String
			}
		case title.FieldIsAdult:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isAdult", values[i])
			} else if value.Valid {
				t.IsAdult = value.Bool
			}
		case title.FieldStartYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field startYear", values[i])
			} else if value.Valid {
				t.StartYear = int(value.Int64)
			}
		case title.FieldEndYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endYear", values[i])
			} else if value.Valid {
				t.EndYear = int(value.Int64)
			}
		case title.FieldRuntimeMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field runtimeMinutes", values[i])
			} else if value.Valid {
				t.RuntimeMinutes = int(value.Int64)
			}
		case title.FieldGenre:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field genre", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Genre); err != nil {
					return fmt.Errorf("unmarshal field genre: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Title.
// Note that you need to call Title.Unwrap() before calling this method if this Title
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Title) Update() *TitleUpdateOne {
	return (&TitleClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Title entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Title) Unwrap() *Title {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Title is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Title) String() string {
	var builder strings.Builder
	builder.WriteString("Title(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tconst=")
	builder.WriteString(t.Tconst)
	builder.WriteString(", ")
	builder.WriteString("titleType=")
	builder.WriteString(t.TitleType)
	builder.WriteString(", ")
	builder.WriteString("primaryTitle=")
	builder.WriteString(t.PrimaryTitle)
	builder.WriteString(", ")
	builder.WriteString("originalTitle=")
	builder.WriteString(t.OriginalTitle)
	builder.WriteString(", ")
	builder.WriteString("isAdult=")
	builder.WriteString(fmt.Sprintf("%v", t.IsAdult))
	builder.WriteString(", ")
	builder.WriteString("startYear=")
	builder.WriteString(fmt.Sprintf("%v", t.StartYear))
	builder.WriteString(", ")
	builder.WriteString("endYear=")
	builder.WriteString(fmt.Sprintf("%v", t.EndYear))
	builder.WriteString(", ")
	builder.WriteString("runtimeMinutes=")
	builder.WriteString(fmt.Sprintf("%v", t.RuntimeMinutes))
	builder.WriteString(", ")
	builder.WriteString("genre=")
	builder.WriteString(fmt.Sprintf("%v", t.Genre))
	builder.WriteByte(')')
	return builder.String()
}

// Titles is a parsable slice of Title.
type Titles []*Title

func (t Titles) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package episode

import (
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Tconst applies equality check predicate on the "tconst" field. It's identical to TconstEQ.
func Tconst(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// ParentTconst applies equality check predicate on the "parentTconst" field. It's identical to ParentTconstEQ.
func ParentTconst(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentTconst), v))
	})
}

// SeasonNumber applies equality check predicate on the "seasonNumber" field. It's identical to SeasonNumberEQ.
func SeasonNumber(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeasonNumber), v))
	})
}

// EpisodeNumber applies equality check predicate on the "episodeNumber" field. It's identical to EpisodeNumberEQ.
func EpisodeNumber(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeNumber), v))
	})
}

// TconstEQ applies the EQ predicate on the "tconst" field.
func TconstEQ(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// TconstNEQ applies the NEQ predicate on the "tconst" field.
func TconstNEQ(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTconst), v))
	})
}

// TconstIn applies the In predicate on the "tconst" field.
func TconstIn(vs ...string) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTconst), v...))
	})
}

// TconstNotIn applies the NotIn predicate on the "tconst" field.
func TconstNotIn(vs ...string) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTconst), v...))
	})
}

// TconstGT applies the GT predicate on the "tconst" field.
func TconstGT(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTconst), v))
	})
}

// TconstGTE applies the GTE predicate on the "tconst" field.
func TconstGTE(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTconst), v))
	})
}

// TconstLT applies the LT predicate on the "tconst" field.
func TconstLT(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTconst), v))
	})
}

// TconstLTE applies the LTE predicate on the "tconst" field.
func TconstLTE(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTconst), v))
	})
}

// TconstContains applies the Contains predicate on the "tconst" field.
func TconstContains(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTconst), v))
	})
}

// TconstHasPrefix applies the HasPrefix predicate on the "tconst" field.
func TconstHasPrefix(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTconst), v))
	})
}

// TconstHasSuffix applies the HasSuffix predicate on the "tconst" field.
func TconstHasSuffix(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTconst), v))
	})
}

// TconstEqualFold applies the EqualFold predicate on the "tconst" field.
func TconstEqualFold(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTconst), v))
	})
}

// TconstContainsFold applies the ContainsFold predicate on the "tconst" field.
func TconstContainsFold(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTconst), v))
	})
}

// ParentTconstEQ applies the EQ predicate on the "parentTconst" field.
func ParentTconstEQ(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentTconst), v))
	})
}

// ParentTconstNEQ applies the NEQ predicate on the "parentTconst" field.
func ParentTconstNEQ(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentTconst), v))
	})
}

// ParentTconstIn applies the In predicate on the "parentTconst" field.
func ParentTconstIn(vs ...string) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentTconst), v...))
	})
}

// ParentTconstNotIn applies the NotIn predicate on the "parentTconst" field.
func ParentTconstNotIn(vs ...string) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentTconst), v...))
	})
}

// ParentTconstGT applies the GT predicate on the "parentTconst" field.
func ParentTconstGT(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentTconst), v))
	})
}

// ParentTconstGTE applies the GTE predicate on the "parentTconst" field.
func ParentTconstGTE(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentTconst), v))
	})
}

// ParentTconstLT applies the LT predicate on the "parentTconst" field.
func ParentTconstLT(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentTconst), v))
	})
}

// ParentTconstLTE applies the LTE predicate on the "parentTconst" field.
func ParentTconstLTE(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentTconst), v))
	})
}

// ParentTconstContains applies the Contains predicate on the "parentTconst" field.
func ParentTconstContains(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentTconst), v))
	})
}

// ParentTconstHasPrefix applies the HasPrefix predicate on the "parentTconst" field.
func ParentTconstHasPrefix(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentTconst), v))
	})
}

// ParentTconstHasSuffix applies the HasSuffix predicate on the "parentTconst" field.
func ParentTconstHasSuffix(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentTconst), v))
	})
}

// ParentTconstEqualFold applies the EqualFold predicate on the "parentTconst" field.
func ParentTconstEqualFold(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentTconst), v))
	})
}

// ParentTconstContainsFold applies the ContainsFold predicate on the "parentTconst" field.
func ParentTconstContainsFold(v string) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentTconst), v))
	})
}

// SeasonNumberEQ applies the EQ predicate on the "seasonNumber" field.
func SeasonNumberEQ(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeasonNumber), v))
	})
}

// SeasonNumberNEQ applies the NEQ predicate on the "seasonNumber" field.
func SeasonNumberNEQ(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeasonNumber), v))
	})
}

// SeasonNumberIn applies the In predicate on the "seasonNumber" field.
func SeasonNumberIn(vs ...int) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeasonNumber), v...))
	})
}

// SeasonNumberNotIn applies the NotIn predicate on the "seasonNumber" field.
func SeasonNumberNotIn(vs ...int) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeasonNumber), v...))
	})
}

// SeasonNumberGT applies the GT predicate on the "seasonNumber" field.
func SeasonNumberGT(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeasonNumber), v))
	})
}

// SeasonNumberGTE applies the GTE predicate on the "seasonNumber" field.
func SeasonNumberGTE(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeasonNumber), v))
	})
}

// SeasonNumberLT applies the LT predicate on the "seasonNumber" field.
func SeasonNumberLT(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeasonNumber), v))
	})
}

// SeasonNumberLTE applies the LTE predicate on the "seasonNumber" field.
func SeasonNumberLTE(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeasonNumber), v))
	})
}

// EpisodeNumberEQ applies the EQ predicate on the "episodeNumber" field.
func EpisodeNumberEQ(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeNumber), v))
	})
}

// EpisodeNumberNEQ applies the NEQ predicate on the "episodeNumber" field.
func EpisodeNumberNEQ(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpisodeNumber), v))
	})
}

// EpisodeNumberIn applies the In predicate on the "episodeNumber" field.
func EpisodeNumberIn(vs ...int) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEpisodeNumber), v...))
	})
}

// EpisodeNumberNotIn applies the NotIn predicate on the "episodeNumber" field.
func EpisodeNumberNotIn(vs ...int) predicate.Episode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Episode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEpisodeNumber), v...))
	})
}

// EpisodeNumberGT applies the GT predicate on the "episodeNumber" field.
func EpisodeNumberGT(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpisodeNumber), v))
	})
}

// EpisodeNumberGTE applies the GTE predicate on the "episodeNumber" field.
func EpisodeNumberGTE(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpisodeNumber), v))
	})
}

// EpisodeNumberLT applies the LT predicate on the "episodeNumber" field.
func EpisodeNumberLT(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpisodeNumber), v))
	})
}

// EpisodeNumberLTE applies the LTE predicate on the "episodeNumber" field.
func EpisodeNumberLTE(v int) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpisodeNumber), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Episode) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		p(s.Not())
	})
}

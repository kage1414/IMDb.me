// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"imdb-db/ent/akas"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Akas is the model entity for the Akas schema.
type Akas struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TitleId holds the value of the "titleId" field.
	TitleId string `json:"titleId,omitempty"`
	// Ordering holds the value of the "ordering" field.
	Ordering int `json:"ordering,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Types holds the value of the "types" field.
	Types []string `json:"types,omitempty"`
	// Attributes holds the value of the "attributes" field.
	Attributes []string `json:"attributes,omitempty"`
	// IsOriginalTitle holds the value of the "isOriginalTitle" field.
	IsOriginalTitle bool `json:"isOriginalTitle,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Akas) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case akas.FieldTypes, akas.FieldAttributes:
			values[i] = new([]byte)
		case akas.FieldIsOriginalTitle:
			values[i] = new(sql.NullBool)
		case akas.FieldID, akas.FieldOrdering:
			values[i] = new(sql.NullInt64)
		case akas.FieldTitleId, akas.FieldTitle, akas.FieldRegion, akas.FieldLanguage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Akas", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Akas fields.
func (a *Akas) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case akas.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case akas.FieldTitleId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titleId", values[i])
			} else if value.Valid {
				a.TitleId = value.String
			}
		case akas.FieldOrdering:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordering", values[i])
			} else if value.Valid {
				a.Ordering = int(value.Int64)
			}
		case akas.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case akas.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				a.Region = value.String
			}
		case akas.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				a.Language = value.String
			}
		case akas.FieldTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Types); err != nil {
					return fmt.Errorf("unmarshal field types: %w", err)
				}
			}
		case akas.FieldAttributes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Attributes); err != nil {
					return fmt.Errorf("unmarshal field attributes: %w", err)
				}
			}
		case akas.FieldIsOriginalTitle:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isOriginalTitle", values[i])
			} else if value.Valid {
				a.IsOriginalTitle = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Akas.
// Note that you need to call Akas.Unwrap() before calling this method if this Akas
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Akas) Update() *AkasUpdateOne {
	return (&AkasClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Akas entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Akas) Unwrap() *Akas {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Akas is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Akas) String() string {
	var builder strings.Builder
	builder.WriteString("Akas(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("titleId=")
	builder.WriteString(a.TitleId)
	builder.WriteString(", ")
	builder.WriteString("ordering=")
	builder.WriteString(fmt.Sprintf("%v", a.Ordering))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(a.Region)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(a.Language)
	builder.WriteString(", ")
	builder.WriteString("types=")
	builder.WriteString(fmt.Sprintf("%v", a.Types))
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(fmt.Sprintf("%v", a.Attributes))
	builder.WriteString(", ")
	builder.WriteString("isOriginalTitle=")
	builder.WriteString(fmt.Sprintf("%v", a.IsOriginalTitle))
	builder.WriteByte(')')
	return builder.String()
}

// AkasSlice is a parsable slice of Akas.
type AkasSlice []*Akas

func (a AkasSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package title

import (
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Tconst applies equality check predicate on the "tconst" field. It's identical to TconstEQ.
func Tconst(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// TitleType applies equality check predicate on the "titleType" field. It's identical to TitleTypeEQ.
func TitleType(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleType), v))
	})
}

// PrimaryTitle applies equality check predicate on the "primaryTitle" field. It's identical to PrimaryTitleEQ.
func PrimaryTitle(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryTitle), v))
	})
}

// OriginalTitle applies equality check predicate on the "originalTitle" field. It's identical to OriginalTitleEQ.
func OriginalTitle(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalTitle), v))
	})
}

// IsAdult applies equality check predicate on the "isAdult" field. It's identical to IsAdultEQ.
func IsAdult(v bool) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdult), v))
	})
}

// StartYear applies equality check predicate on the "startYear" field. It's identical to StartYearEQ.
func StartYear(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartYear), v))
	})
}

// EndYear applies equality check predicate on the "endYear" field. It's identical to EndYearEQ.
func EndYear(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndYear), v))
	})
}

// RuntimeMinutes applies equality check predicate on the "runtimeMinutes" field. It's identical to RuntimeMinutesEQ.
func RuntimeMinutes(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuntimeMinutes), v))
	})
}

// TconstEQ applies the EQ predicate on the "tconst" field.
func TconstEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// TconstNEQ applies the NEQ predicate on the "tconst" field.
func TconstNEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTconst), v))
	})
}

// TconstIn applies the In predicate on the "tconst" field.
func TconstIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTconst), v...))
	})
}

// TconstNotIn applies the NotIn predicate on the "tconst" field.
func TconstNotIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTconst), v...))
	})
}

// TconstGT applies the GT predicate on the "tconst" field.
func TconstGT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTconst), v))
	})
}

// TconstGTE applies the GTE predicate on the "tconst" field.
func TconstGTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTconst), v))
	})
}

// TconstLT applies the LT predicate on the "tconst" field.
func TconstLT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTconst), v))
	})
}

// TconstLTE applies the LTE predicate on the "tconst" field.
func TconstLTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTconst), v))
	})
}

// TconstContains applies the Contains predicate on the "tconst" field.
func TconstContains(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTconst), v))
	})
}

// TconstHasPrefix applies the HasPrefix predicate on the "tconst" field.
func TconstHasPrefix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTconst), v))
	})
}

// TconstHasSuffix applies the HasSuffix predicate on the "tconst" field.
func TconstHasSuffix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTconst), v))
	})
}

// TconstEqualFold applies the EqualFold predicate on the "tconst" field.
func TconstEqualFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTconst), v))
	})
}

// TconstContainsFold applies the ContainsFold predicate on the "tconst" field.
func TconstContainsFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTconst), v))
	})
}

// TitleTypeEQ applies the EQ predicate on the "titleType" field.
func TitleTypeEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleType), v))
	})
}

// TitleTypeNEQ applies the NEQ predicate on the "titleType" field.
func TitleTypeNEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitleType), v))
	})
}

// TitleTypeIn applies the In predicate on the "titleType" field.
func TitleTypeIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitleType), v...))
	})
}

// TitleTypeNotIn applies the NotIn predicate on the "titleType" field.
func TitleTypeNotIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitleType), v...))
	})
}

// TitleTypeGT applies the GT predicate on the "titleType" field.
func TitleTypeGT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitleType), v))
	})
}

// TitleTypeGTE applies the GTE predicate on the "titleType" field.
func TitleTypeGTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitleType), v))
	})
}

// TitleTypeLT applies the LT predicate on the "titleType" field.
func TitleTypeLT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitleType), v))
	})
}

// TitleTypeLTE applies the LTE predicate on the "titleType" field.
func TitleTypeLTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitleType), v))
	})
}

// TitleTypeContains applies the Contains predicate on the "titleType" field.
func TitleTypeContains(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitleType), v))
	})
}

// TitleTypeHasPrefix applies the HasPrefix predicate on the "titleType" field.
func TitleTypeHasPrefix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitleType), v))
	})
}

// TitleTypeHasSuffix applies the HasSuffix predicate on the "titleType" field.
func TitleTypeHasSuffix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitleType), v))
	})
}

// TitleTypeEqualFold applies the EqualFold predicate on the "titleType" field.
func TitleTypeEqualFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitleType), v))
	})
}

// TitleTypeContainsFold applies the ContainsFold predicate on the "titleType" field.
func TitleTypeContainsFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitleType), v))
	})
}

// PrimaryTitleEQ applies the EQ predicate on the "primaryTitle" field.
func PrimaryTitleEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleNEQ applies the NEQ predicate on the "primaryTitle" field.
func PrimaryTitleNEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleIn applies the In predicate on the "primaryTitle" field.
func PrimaryTitleIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrimaryTitle), v...))
	})
}

// PrimaryTitleNotIn applies the NotIn predicate on the "primaryTitle" field.
func PrimaryTitleNotIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrimaryTitle), v...))
	})
}

// PrimaryTitleGT applies the GT predicate on the "primaryTitle" field.
func PrimaryTitleGT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleGTE applies the GTE predicate on the "primaryTitle" field.
func PrimaryTitleGTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleLT applies the LT predicate on the "primaryTitle" field.
func PrimaryTitleLT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleLTE applies the LTE predicate on the "primaryTitle" field.
func PrimaryTitleLTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleContains applies the Contains predicate on the "primaryTitle" field.
func PrimaryTitleContains(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleHasPrefix applies the HasPrefix predicate on the "primaryTitle" field.
func PrimaryTitleHasPrefix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleHasSuffix applies the HasSuffix predicate on the "primaryTitle" field.
func PrimaryTitleHasSuffix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleEqualFold applies the EqualFold predicate on the "primaryTitle" field.
func PrimaryTitleEqualFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrimaryTitle), v))
	})
}

// PrimaryTitleContainsFold applies the ContainsFold predicate on the "primaryTitle" field.
func PrimaryTitleContainsFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrimaryTitle), v))
	})
}

// OriginalTitleEQ applies the EQ predicate on the "originalTitle" field.
func OriginalTitleEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleNEQ applies the NEQ predicate on the "originalTitle" field.
func OriginalTitleNEQ(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleIn applies the In predicate on the "originalTitle" field.
func OriginalTitleIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginalTitle), v...))
	})
}

// OriginalTitleNotIn applies the NotIn predicate on the "originalTitle" field.
func OriginalTitleNotIn(vs ...string) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginalTitle), v...))
	})
}

// OriginalTitleGT applies the GT predicate on the "originalTitle" field.
func OriginalTitleGT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleGTE applies the GTE predicate on the "originalTitle" field.
func OriginalTitleGTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleLT applies the LT predicate on the "originalTitle" field.
func OriginalTitleLT(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleLTE applies the LTE predicate on the "originalTitle" field.
func OriginalTitleLTE(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleContains applies the Contains predicate on the "originalTitle" field.
func OriginalTitleContains(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleHasPrefix applies the HasPrefix predicate on the "originalTitle" field.
func OriginalTitleHasPrefix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleHasSuffix applies the HasSuffix predicate on the "originalTitle" field.
func OriginalTitleHasSuffix(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleEqualFold applies the EqualFold predicate on the "originalTitle" field.
func OriginalTitleEqualFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOriginalTitle), v))
	})
}

// OriginalTitleContainsFold applies the ContainsFold predicate on the "originalTitle" field.
func OriginalTitleContainsFold(v string) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOriginalTitle), v))
	})
}

// IsAdultEQ applies the EQ predicate on the "isAdult" field.
func IsAdultEQ(v bool) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdult), v))
	})
}

// IsAdultNEQ applies the NEQ predicate on the "isAdult" field.
func IsAdultNEQ(v bool) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAdult), v))
	})
}

// StartYearEQ applies the EQ predicate on the "startYear" field.
func StartYearEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartYear), v))
	})
}

// StartYearNEQ applies the NEQ predicate on the "startYear" field.
func StartYearNEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartYear), v))
	})
}

// StartYearIn applies the In predicate on the "startYear" field.
func StartYearIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartYear), v...))
	})
}

// StartYearNotIn applies the NotIn predicate on the "startYear" field.
func StartYearNotIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartYear), v...))
	})
}

// StartYearGT applies the GT predicate on the "startYear" field.
func StartYearGT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartYear), v))
	})
}

// StartYearGTE applies the GTE predicate on the "startYear" field.
func StartYearGTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartYear), v))
	})
}

// StartYearLT applies the LT predicate on the "startYear" field.
func StartYearLT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartYear), v))
	})
}

// StartYearLTE applies the LTE predicate on the "startYear" field.
func StartYearLTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartYear), v))
	})
}

// EndYearEQ applies the EQ predicate on the "endYear" field.
func EndYearEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndYear), v))
	})
}

// EndYearNEQ applies the NEQ predicate on the "endYear" field.
func EndYearNEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndYear), v))
	})
}

// EndYearIn applies the In predicate on the "endYear" field.
func EndYearIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndYear), v...))
	})
}

// EndYearNotIn applies the NotIn predicate on the "endYear" field.
func EndYearNotIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndYear), v...))
	})
}

// EndYearGT applies the GT predicate on the "endYear" field.
func EndYearGT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndYear), v))
	})
}

// EndYearGTE applies the GTE predicate on the "endYear" field.
func EndYearGTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndYear), v))
	})
}

// EndYearLT applies the LT predicate on the "endYear" field.
func EndYearLT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndYear), v))
	})
}

// EndYearLTE applies the LTE predicate on the "endYear" field.
func EndYearLTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndYear), v))
	})
}

// RuntimeMinutesEQ applies the EQ predicate on the "runtimeMinutes" field.
func RuntimeMinutesEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuntimeMinutes), v))
	})
}

// RuntimeMinutesNEQ applies the NEQ predicate on the "runtimeMinutes" field.
func RuntimeMinutesNEQ(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRuntimeMinutes), v))
	})
}

// RuntimeMinutesIn applies the In predicate on the "runtimeMinutes" field.
func RuntimeMinutesIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRuntimeMinutes), v...))
	})
}

// RuntimeMinutesNotIn applies the NotIn predicate on the "runtimeMinutes" field.
func RuntimeMinutesNotIn(vs ...int) predicate.Title {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Title(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRuntimeMinutes), v...))
	})
}

// RuntimeMinutesGT applies the GT predicate on the "runtimeMinutes" field.
func RuntimeMinutesGT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRuntimeMinutes), v))
	})
}

// RuntimeMinutesGTE applies the GTE predicate on the "runtimeMinutes" field.
func RuntimeMinutesGTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRuntimeMinutes), v))
	})
}

// RuntimeMinutesLT applies the LT predicate on the "runtimeMinutes" field.
func RuntimeMinutesLT(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRuntimeMinutes), v))
	})
}

// RuntimeMinutesLTE applies the LTE predicate on the "runtimeMinutes" field.
func RuntimeMinutesLTE(v int) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRuntimeMinutes), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Title) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Title) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Title) predicate.Title {
	return predicate.Title(func(s *sql.Selector) {
		p(s.Not())
	})
}

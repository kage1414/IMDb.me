// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdb-db/ent/episode"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EpisodeCreate is the builder for creating a Episode entity.
type EpisodeCreate struct {
	config
	mutation *EpisodeMutation
	hooks    []Hook
}

// SetTconst sets the "tconst" field.
func (ec *EpisodeCreate) SetTconst(s string) *EpisodeCreate {
	ec.mutation.SetTconst(s)
	return ec
}

// SetParentTconst sets the "parentTconst" field.
func (ec *EpisodeCreate) SetParentTconst(s string) *EpisodeCreate {
	ec.mutation.SetParentTconst(s)
	return ec
}

// SetSeasonNumber sets the "seasonNumber" field.
func (ec *EpisodeCreate) SetSeasonNumber(i int) *EpisodeCreate {
	ec.mutation.SetSeasonNumber(i)
	return ec
}

// SetEpisodeNumber sets the "episodeNumber" field.
func (ec *EpisodeCreate) SetEpisodeNumber(i int) *EpisodeCreate {
	ec.mutation.SetEpisodeNumber(i)
	return ec
}

// Mutation returns the EpisodeMutation object of the builder.
func (ec *EpisodeCreate) Mutation() *EpisodeMutation {
	return ec.mutation
}

// Save creates the Episode in the database.
func (ec *EpisodeCreate) Save(ctx context.Context) (*Episode, error) {
	var (
		err  error
		node *Episode
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpisodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Episode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EpisodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EpisodeCreate) SaveX(ctx context.Context) *Episode {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EpisodeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EpisodeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EpisodeCreate) check() error {
	if _, ok := ec.mutation.Tconst(); !ok {
		return &ValidationError{Name: "tconst", err: errors.New(`ent: missing required field "Episode.tconst"`)}
	}
	if _, ok := ec.mutation.ParentTconst(); !ok {
		return &ValidationError{Name: "parentTconst", err: errors.New(`ent: missing required field "Episode.parentTconst"`)}
	}
	if _, ok := ec.mutation.SeasonNumber(); !ok {
		return &ValidationError{Name: "seasonNumber", err: errors.New(`ent: missing required field "Episode.seasonNumber"`)}
	}
	if v, ok := ec.mutation.SeasonNumber(); ok {
		if err := episode.SeasonNumberValidator(v); err != nil {
			return &ValidationError{Name: "seasonNumber", err: fmt.Errorf(`ent: validator failed for field "Episode.seasonNumber": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EpisodeNumber(); !ok {
		return &ValidationError{Name: "episodeNumber", err: errors.New(`ent: missing required field "Episode.episodeNumber"`)}
	}
	if v, ok := ec.mutation.EpisodeNumber(); ok {
		if err := episode.EpisodeNumberValidator(v); err != nil {
			return &ValidationError{Name: "episodeNumber", err: fmt.Errorf(`ent: validator failed for field "Episode.episodeNumber": %w`, err)}
		}
	}
	return nil
}

func (ec *EpisodeCreate) sqlSave(ctx context.Context) (*Episode, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EpisodeCreate) createSpec() (*Episode, *sqlgraph.CreateSpec) {
	var (
		_node = &Episode{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: episode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: episode.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Tconst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldTconst,
		})
		_node.Tconst = value
	}
	if value, ok := ec.mutation.ParentTconst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldParentTconst,
		})
		_node.ParentTconst = value
	}
	if value, ok := ec.mutation.SeasonNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: episode.FieldSeasonNumber,
		})
		_node.SeasonNumber = value
	}
	if value, ok := ec.mutation.EpisodeNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: episode.FieldEpisodeNumber,
		})
		_node.EpisodeNumber = value
	}
	return _node, _spec
}

// EpisodeCreateBulk is the builder for creating many Episode entities in bulk.
type EpisodeCreateBulk struct {
	config
	builders []*EpisodeCreate
}

// Save creates the Episode entities in the database.
func (ecb *EpisodeCreateBulk) Save(ctx context.Context) ([]*Episode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Episode, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpisodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) SaveX(ctx context.Context) []*Episode {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EpisodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"imdb-db/ent/principals"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Principals is the model entity for the Principals schema.
type Principals struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tconst holds the value of the "tconst" field.
	Tconst string `json:"tconst,omitempty"`
	// Ordering holds the value of the "ordering" field.
	Ordering int `json:"ordering,omitempty"`
	// Nconst holds the value of the "nconst" field.
	Nconst string `json:"nconst,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Job holds the value of the "job" field.
	Job string `json:"job,omitempty"`
	// Characters holds the value of the "characters" field.
	Characters string `json:"characters,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Principals) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case principals.FieldID, principals.FieldOrdering:
			values[i] = new(sql.NullInt64)
		case principals.FieldTconst, principals.FieldNconst, principals.FieldCategory, principals.FieldJob, principals.FieldCharacters:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Principals", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Principals fields.
func (pr *Principals) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case principals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case principals.FieldTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tconst", values[i])
			} else if value.Valid {
				pr.Tconst = value.String
			}
		case principals.FieldOrdering:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordering", values[i])
			} else if value.Valid {
				pr.Ordering = int(value.Int64)
			}
		case principals.FieldNconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nconst", values[i])
			} else if value.Valid {
				pr.Nconst = value.String
			}
		case principals.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pr.Category = value.String
			}
		case principals.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				pr.Job = value.String
			}
		case principals.FieldCharacters:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field characters", values[i])
			} else if value.Valid {
				pr.Characters = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Principals.
// Note that you need to call Principals.Unwrap() before calling this method if this Principals
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Principals) Update() *PrincipalsUpdateOne {
	return (&PrincipalsClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Principals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Principals) Unwrap() *Principals {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Principals is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Principals) String() string {
	var builder strings.Builder
	builder.WriteString("Principals(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("tconst=")
	builder.WriteString(pr.Tconst)
	builder.WriteString(", ")
	builder.WriteString("ordering=")
	builder.WriteString(fmt.Sprintf("%v", pr.Ordering))
	builder.WriteString(", ")
	builder.WriteString("nconst=")
	builder.WriteString(pr.Nconst)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pr.Category)
	builder.WriteString(", ")
	builder.WriteString("job=")
	builder.WriteString(pr.Job)
	builder.WriteString(", ")
	builder.WriteString("characters=")
	builder.WriteString(pr.Characters)
	builder.WriteByte(')')
	return builder.String()
}

// PrincipalsSlice is a parsable slice of Principals.
type PrincipalsSlice []*Principals

func (pr PrincipalsSlice) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}

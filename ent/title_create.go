// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdb-db/ent/title"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TitleCreate is the builder for creating a Title entity.
type TitleCreate struct {
	config
	mutation *TitleMutation
	hooks    []Hook
}

// SetTconst sets the "tconst" field.
func (tc *TitleCreate) SetTconst(s string) *TitleCreate {
	tc.mutation.SetTconst(s)
	return tc
}

// SetTitleType sets the "titleType" field.
func (tc *TitleCreate) SetTitleType(s string) *TitleCreate {
	tc.mutation.SetTitleType(s)
	return tc
}

// SetPrimaryTitle sets the "primaryTitle" field.
func (tc *TitleCreate) SetPrimaryTitle(s string) *TitleCreate {
	tc.mutation.SetPrimaryTitle(s)
	return tc
}

// SetOriginalTitle sets the "originalTitle" field.
func (tc *TitleCreate) SetOriginalTitle(s string) *TitleCreate {
	tc.mutation.SetOriginalTitle(s)
	return tc
}

// SetIsAdult sets the "isAdult" field.
func (tc *TitleCreate) SetIsAdult(b bool) *TitleCreate {
	tc.mutation.SetIsAdult(b)
	return tc
}

// SetNillableIsAdult sets the "isAdult" field if the given value is not nil.
func (tc *TitleCreate) SetNillableIsAdult(b *bool) *TitleCreate {
	if b != nil {
		tc.SetIsAdult(*b)
	}
	return tc
}

// SetStartYear sets the "startYear" field.
func (tc *TitleCreate) SetStartYear(i int) *TitleCreate {
	tc.mutation.SetStartYear(i)
	return tc
}

// SetEndYear sets the "endYear" field.
func (tc *TitleCreate) SetEndYear(i int) *TitleCreate {
	tc.mutation.SetEndYear(i)
	return tc
}

// SetRuntimeMinutes sets the "runtimeMinutes" field.
func (tc *TitleCreate) SetRuntimeMinutes(i int) *TitleCreate {
	tc.mutation.SetRuntimeMinutes(i)
	return tc
}

// SetGenre sets the "genre" field.
func (tc *TitleCreate) SetGenre(s []string) *TitleCreate {
	tc.mutation.SetGenre(s)
	return tc
}

// Mutation returns the TitleMutation object of the builder.
func (tc *TitleCreate) Mutation() *TitleMutation {
	return tc.mutation
}

// Save creates the Title in the database.
func (tc *TitleCreate) Save(ctx context.Context) (*Title, error) {
	var (
		err  error
		node *Title
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Title)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TitleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TitleCreate) SaveX(ctx context.Context) *Title {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TitleCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TitleCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TitleCreate) defaults() {
	if _, ok := tc.mutation.IsAdult(); !ok {
		v := title.DefaultIsAdult
		tc.mutation.SetIsAdult(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TitleCreate) check() error {
	if _, ok := tc.mutation.Tconst(); !ok {
		return &ValidationError{Name: "tconst", err: errors.New(`ent: missing required field "Title.tconst"`)}
	}
	if _, ok := tc.mutation.TitleType(); !ok {
		return &ValidationError{Name: "titleType", err: errors.New(`ent: missing required field "Title.titleType"`)}
	}
	if _, ok := tc.mutation.PrimaryTitle(); !ok {
		return &ValidationError{Name: "primaryTitle", err: errors.New(`ent: missing required field "Title.primaryTitle"`)}
	}
	if _, ok := tc.mutation.OriginalTitle(); !ok {
		return &ValidationError{Name: "originalTitle", err: errors.New(`ent: missing required field "Title.originalTitle"`)}
	}
	if _, ok := tc.mutation.IsAdult(); !ok {
		return &ValidationError{Name: "isAdult", err: errors.New(`ent: missing required field "Title.isAdult"`)}
	}
	if _, ok := tc.mutation.StartYear(); !ok {
		return &ValidationError{Name: "startYear", err: errors.New(`ent: missing required field "Title.startYear"`)}
	}
	if v, ok := tc.mutation.StartYear(); ok {
		if err := title.StartYearValidator(v); err != nil {
			return &ValidationError{Name: "startYear", err: fmt.Errorf(`ent: validator failed for field "Title.startYear": %w`, err)}
		}
	}
	if _, ok := tc.mutation.EndYear(); !ok {
		return &ValidationError{Name: "endYear", err: errors.New(`ent: missing required field "Title.endYear"`)}
	}
	if v, ok := tc.mutation.EndYear(); ok {
		if err := title.EndYearValidator(v); err != nil {
			return &ValidationError{Name: "endYear", err: fmt.Errorf(`ent: validator failed for field "Title.endYear": %w`, err)}
		}
	}
	if _, ok := tc.mutation.RuntimeMinutes(); !ok {
		return &ValidationError{Name: "runtimeMinutes", err: errors.New(`ent: missing required field "Title.runtimeMinutes"`)}
	}
	if v, ok := tc.mutation.RuntimeMinutes(); ok {
		if err := title.RuntimeMinutesValidator(v); err != nil {
			return &ValidationError{Name: "runtimeMinutes", err: fmt.Errorf(`ent: validator failed for field "Title.runtimeMinutes": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Genre(); !ok {
		return &ValidationError{Name: "genre", err: errors.New(`ent: missing required field "Title.genre"`)}
	}
	return nil
}

func (tc *TitleCreate) sqlSave(ctx context.Context) (*Title, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TitleCreate) createSpec() (*Title, *sqlgraph.CreateSpec) {
	var (
		_node = &Title{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: title.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: title.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Tconst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: title.FieldTconst,
		})
		_node.Tconst = value
	}
	if value, ok := tc.mutation.TitleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: title.FieldTitleType,
		})
		_node.TitleType = value
	}
	if value, ok := tc.mutation.PrimaryTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: title.FieldPrimaryTitle,
		})
		_node.PrimaryTitle = value
	}
	if value, ok := tc.mutation.OriginalTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: title.FieldOriginalTitle,
		})
		_node.OriginalTitle = value
	}
	if value, ok := tc.mutation.IsAdult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: title.FieldIsAdult,
		})
		_node.IsAdult = value
	}
	if value, ok := tc.mutation.StartYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: title.FieldStartYear,
		})
		_node.StartYear = value
	}
	if value, ok := tc.mutation.EndYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: title.FieldEndYear,
		})
		_node.EndYear = value
	}
	if value, ok := tc.mutation.RuntimeMinutes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: title.FieldRuntimeMinutes,
		})
		_node.RuntimeMinutes = value
	}
	if value, ok := tc.mutation.Genre(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: title.FieldGenre,
		})
		_node.Genre = value
	}
	return _node, _spec
}

// TitleCreateBulk is the builder for creating many Title entities in bulk.
type TitleCreateBulk struct {
	config
	builders []*TitleCreate
}

// Save creates the Title entities in the database.
func (tcb *TitleCreateBulk) Save(ctx context.Context) ([]*Title, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Title, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TitleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TitleCreateBulk) SaveX(ctx context.Context) []*Title {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TitleCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TitleCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package principals

import (
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Tconst applies equality check predicate on the "tconst" field. It's identical to TconstEQ.
func Tconst(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// Ordering applies equality check predicate on the "ordering" field. It's identical to OrderingEQ.
func Ordering(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdering), v))
	})
}

// Nconst applies equality check predicate on the "nconst" field. It's identical to NconstEQ.
func Nconst(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNconst), v))
	})
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategory), v))
	})
}

// Job applies equality check predicate on the "job" field. It's identical to JobEQ.
func Job(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// Characters applies equality check predicate on the "characters" field. It's identical to CharactersEQ.
func Characters(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharacters), v))
	})
}

// TconstEQ applies the EQ predicate on the "tconst" field.
func TconstEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTconst), v))
	})
}

// TconstNEQ applies the NEQ predicate on the "tconst" field.
func TconstNEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTconst), v))
	})
}

// TconstIn applies the In predicate on the "tconst" field.
func TconstIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTconst), v...))
	})
}

// TconstNotIn applies the NotIn predicate on the "tconst" field.
func TconstNotIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTconst), v...))
	})
}

// TconstGT applies the GT predicate on the "tconst" field.
func TconstGT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTconst), v))
	})
}

// TconstGTE applies the GTE predicate on the "tconst" field.
func TconstGTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTconst), v))
	})
}

// TconstLT applies the LT predicate on the "tconst" field.
func TconstLT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTconst), v))
	})
}

// TconstLTE applies the LTE predicate on the "tconst" field.
func TconstLTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTconst), v))
	})
}

// TconstContains applies the Contains predicate on the "tconst" field.
func TconstContains(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTconst), v))
	})
}

// TconstHasPrefix applies the HasPrefix predicate on the "tconst" field.
func TconstHasPrefix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTconst), v))
	})
}

// TconstHasSuffix applies the HasSuffix predicate on the "tconst" field.
func TconstHasSuffix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTconst), v))
	})
}

// TconstEqualFold applies the EqualFold predicate on the "tconst" field.
func TconstEqualFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTconst), v))
	})
}

// TconstContainsFold applies the ContainsFold predicate on the "tconst" field.
func TconstContainsFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTconst), v))
	})
}

// OrderingEQ applies the EQ predicate on the "ordering" field.
func OrderingEQ(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdering), v))
	})
}

// OrderingNEQ applies the NEQ predicate on the "ordering" field.
func OrderingNEQ(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrdering), v))
	})
}

// OrderingIn applies the In predicate on the "ordering" field.
func OrderingIn(vs ...int) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrdering), v...))
	})
}

// OrderingNotIn applies the NotIn predicate on the "ordering" field.
func OrderingNotIn(vs ...int) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrdering), v...))
	})
}

// OrderingGT applies the GT predicate on the "ordering" field.
func OrderingGT(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrdering), v))
	})
}

// OrderingGTE applies the GTE predicate on the "ordering" field.
func OrderingGTE(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrdering), v))
	})
}

// OrderingLT applies the LT predicate on the "ordering" field.
func OrderingLT(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrdering), v))
	})
}

// OrderingLTE applies the LTE predicate on the "ordering" field.
func OrderingLTE(v int) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrdering), v))
	})
}

// NconstEQ applies the EQ predicate on the "nconst" field.
func NconstEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNconst), v))
	})
}

// NconstNEQ applies the NEQ predicate on the "nconst" field.
func NconstNEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNconst), v))
	})
}

// NconstIn applies the In predicate on the "nconst" field.
func NconstIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNconst), v...))
	})
}

// NconstNotIn applies the NotIn predicate on the "nconst" field.
func NconstNotIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNconst), v...))
	})
}

// NconstGT applies the GT predicate on the "nconst" field.
func NconstGT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNconst), v))
	})
}

// NconstGTE applies the GTE predicate on the "nconst" field.
func NconstGTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNconst), v))
	})
}

// NconstLT applies the LT predicate on the "nconst" field.
func NconstLT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNconst), v))
	})
}

// NconstLTE applies the LTE predicate on the "nconst" field.
func NconstLTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNconst), v))
	})
}

// NconstContains applies the Contains predicate on the "nconst" field.
func NconstContains(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNconst), v))
	})
}

// NconstHasPrefix applies the HasPrefix predicate on the "nconst" field.
func NconstHasPrefix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNconst), v))
	})
}

// NconstHasSuffix applies the HasSuffix predicate on the "nconst" field.
func NconstHasSuffix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNconst), v))
	})
}

// NconstEqualFold applies the EqualFold predicate on the "nconst" field.
func NconstEqualFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNconst), v))
	})
}

// NconstContainsFold applies the ContainsFold predicate on the "nconst" field.
func NconstContainsFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNconst), v))
	})
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategory), v))
	})
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategory), v))
	})
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategory), v...))
	})
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategory), v...))
	})
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategory), v))
	})
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategory), v))
	})
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategory), v))
	})
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategory), v))
	})
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategory), v))
	})
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategory), v))
	})
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategory), v))
	})
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategory), v))
	})
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategory), v))
	})
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJob), v))
	})
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJob), v...))
	})
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJob), v...))
	})
}

// JobGT applies the GT predicate on the "job" field.
func JobGT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJob), v))
	})
}

// JobGTE applies the GTE predicate on the "job" field.
func JobGTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJob), v))
	})
}

// JobLT applies the LT predicate on the "job" field.
func JobLT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJob), v))
	})
}

// JobLTE applies the LTE predicate on the "job" field.
func JobLTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJob), v))
	})
}

// JobContains applies the Contains predicate on the "job" field.
func JobContains(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJob), v))
	})
}

// JobHasPrefix applies the HasPrefix predicate on the "job" field.
func JobHasPrefix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJob), v))
	})
}

// JobHasSuffix applies the HasSuffix predicate on the "job" field.
func JobHasSuffix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJob), v))
	})
}

// JobEqualFold applies the EqualFold predicate on the "job" field.
func JobEqualFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJob), v))
	})
}

// JobContainsFold applies the ContainsFold predicate on the "job" field.
func JobContainsFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJob), v))
	})
}

// CharactersEQ applies the EQ predicate on the "characters" field.
func CharactersEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCharacters), v))
	})
}

// CharactersNEQ applies the NEQ predicate on the "characters" field.
func CharactersNEQ(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCharacters), v))
	})
}

// CharactersIn applies the In predicate on the "characters" field.
func CharactersIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCharacters), v...))
	})
}

// CharactersNotIn applies the NotIn predicate on the "characters" field.
func CharactersNotIn(vs ...string) predicate.Principals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Principals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCharacters), v...))
	})
}

// CharactersGT applies the GT predicate on the "characters" field.
func CharactersGT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCharacters), v))
	})
}

// CharactersGTE applies the GTE predicate on the "characters" field.
func CharactersGTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCharacters), v))
	})
}

// CharactersLT applies the LT predicate on the "characters" field.
func CharactersLT(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCharacters), v))
	})
}

// CharactersLTE applies the LTE predicate on the "characters" field.
func CharactersLTE(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCharacters), v))
	})
}

// CharactersContains applies the Contains predicate on the "characters" field.
func CharactersContains(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCharacters), v))
	})
}

// CharactersHasPrefix applies the HasPrefix predicate on the "characters" field.
func CharactersHasPrefix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCharacters), v))
	})
}

// CharactersHasSuffix applies the HasSuffix predicate on the "characters" field.
func CharactersHasSuffix(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCharacters), v))
	})
}

// CharactersEqualFold applies the EqualFold predicate on the "characters" field.
func CharactersEqualFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCharacters), v))
	})
}

// CharactersContainsFold applies the ContainsFold predicate on the "characters" field.
func CharactersContainsFold(v string) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCharacters), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Principals) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Principals) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Principals) predicate.Principals {
	return predicate.Principals(func(s *sql.Selector) {
		p(s.Not())
	})
}

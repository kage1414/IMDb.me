// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"imdb-db/ent/ratings"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Ratings is the model entity for the Ratings schema.
type Ratings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tconst holds the value of the "tconst" field.
	Tconst string `json:"tconst,omitempty"`
	// AverageRating holds the value of the "averageRating" field.
	AverageRating float64 `json:"averageRating,omitempty"`
	// NumVotes holds the value of the "numVotes" field.
	NumVotes int `json:"numVotes,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ratings) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ratings.FieldAverageRating:
			values[i] = new(sql.NullFloat64)
		case ratings.FieldID, ratings.FieldNumVotes:
			values[i] = new(sql.NullInt64)
		case ratings.FieldTconst:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ratings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ratings fields.
func (r *Ratings) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ratings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case ratings.FieldTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tconst", values[i])
			} else if value.Valid {
				r.Tconst = value.String
			}
		case ratings.FieldAverageRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field averageRating", values[i])
			} else if value.Valid {
				r.AverageRating = value.Float64
			}
		case ratings.FieldNumVotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numVotes", values[i])
			} else if value.Valid {
				r.NumVotes = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Ratings.
// Note that you need to call Ratings.Unwrap() before calling this method if this Ratings
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Ratings) Update() *RatingsUpdateOne {
	return (&RatingsClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Ratings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Ratings) Unwrap() *Ratings {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ratings is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Ratings) String() string {
	var builder strings.Builder
	builder.WriteString("Ratings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("tconst=")
	builder.WriteString(r.Tconst)
	builder.WriteString(", ")
	builder.WriteString("averageRating=")
	builder.WriteString(fmt.Sprintf("%v", r.AverageRating))
	builder.WriteString(", ")
	builder.WriteString("numVotes=")
	builder.WriteString(fmt.Sprintf("%v", r.NumVotes))
	builder.WriteByte(')')
	return builder.String()
}

// RatingsSlice is a parsable slice of Ratings.
type RatingsSlice []*Ratings

func (r RatingsSlice) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"imdb-db/ent/episode"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Episode is the model entity for the Episode schema.
type Episode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tconst holds the value of the "tconst" field.
	Tconst string `json:"tconst,omitempty"`
	// ParentTconst holds the value of the "parentTconst" field.
	ParentTconst string `json:"parentTconst,omitempty"`
	// SeasonNumber holds the value of the "seasonNumber" field.
	SeasonNumber int `json:"seasonNumber,omitempty"`
	// EpisodeNumber holds the value of the "episodeNumber" field.
	EpisodeNumber int `json:"episodeNumber,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Episode) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case episode.FieldID, episode.FieldSeasonNumber, episode.FieldEpisodeNumber:
			values[i] = new(sql.NullInt64)
		case episode.FieldTconst, episode.FieldParentTconst:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Episode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Episode fields.
func (e *Episode) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case episode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case episode.FieldTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tconst", values[i])
			} else if value.Valid {
				e.Tconst = value.String
			}
		case episode.FieldParentTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parentTconst", values[i])
			} else if value.Valid {
				e.ParentTconst = value.String
			}
		case episode.FieldSeasonNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seasonNumber", values[i])
			} else if value.Valid {
				e.SeasonNumber = int(value.Int64)
			}
		case episode.FieldEpisodeNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episodeNumber", values[i])
			} else if value.Valid {
				e.EpisodeNumber = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Episode.
// Note that you need to call Episode.Unwrap() before calling this method if this Episode
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Episode) Update() *EpisodeUpdateOne {
	return (&EpisodeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Episode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Episode) Unwrap() *Episode {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Episode is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Episode) String() string {
	var builder strings.Builder
	builder.WriteString("Episode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("tconst=")
	builder.WriteString(e.Tconst)
	builder.WriteString(", ")
	builder.WriteString("parentTconst=")
	builder.WriteString(e.ParentTconst)
	builder.WriteString(", ")
	builder.WriteString("seasonNumber=")
	builder.WriteString(fmt.Sprintf("%v", e.SeasonNumber))
	builder.WriteString(", ")
	builder.WriteString("episodeNumber=")
	builder.WriteString(fmt.Sprintf("%v", e.EpisodeNumber))
	builder.WriteByte(')')
	return builder.String()
}

// Episodes is a parsable slice of Episode.
type Episodes []*Episode

func (e Episodes) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdb-db/ent/name"
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NameUpdate is the builder for updating Name entities.
type NameUpdate struct {
	config
	hooks    []Hook
	mutation *NameMutation
}

// Where appends a list predicates to the NameUpdate builder.
func (nu *NameUpdate) Where(ps ...predicate.Name) *NameUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTconst sets the "tconst" field.
func (nu *NameUpdate) SetTconst(s string) *NameUpdate {
	nu.mutation.SetTconst(s)
	return nu
}

// SetPrimaryName sets the "primaryName" field.
func (nu *NameUpdate) SetPrimaryName(s string) *NameUpdate {
	nu.mutation.SetPrimaryName(s)
	return nu
}

// SetBirthYear sets the "birthYear" field.
func (nu *NameUpdate) SetBirthYear(i int) *NameUpdate {
	nu.mutation.ResetBirthYear()
	nu.mutation.SetBirthYear(i)
	return nu
}

// AddBirthYear adds i to the "birthYear" field.
func (nu *NameUpdate) AddBirthYear(i int) *NameUpdate {
	nu.mutation.AddBirthYear(i)
	return nu
}

// SetDeathYear sets the "deathYear" field.
func (nu *NameUpdate) SetDeathYear(i int) *NameUpdate {
	nu.mutation.ResetDeathYear()
	nu.mutation.SetDeathYear(i)
	return nu
}

// AddDeathYear adds i to the "deathYear" field.
func (nu *NameUpdate) AddDeathYear(i int) *NameUpdate {
	nu.mutation.AddDeathYear(i)
	return nu
}

// SetPrimaryProfession sets the "primaryProfession" field.
func (nu *NameUpdate) SetPrimaryProfession(s []string) *NameUpdate {
	nu.mutation.SetPrimaryProfession(s)
	return nu
}

// SetKnownForTitles sets the "knownForTitles" field.
func (nu *NameUpdate) SetKnownForTitles(s []string) *NameUpdate {
	nu.mutation.SetKnownForTitles(s)
	return nu
}

// Mutation returns the NameMutation object of the builder.
func (nu *NameUpdate) Mutation() *NameMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NameUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NameUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NameUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NameUpdate) check() error {
	if v, ok := nu.mutation.BirthYear(); ok {
		if err := name.BirthYearValidator(v); err != nil {
			return &ValidationError{Name: "birthYear", err: fmt.Errorf(`ent: validator failed for field "Name.birthYear": %w`, err)}
		}
	}
	if v, ok := nu.mutation.DeathYear(); ok {
		if err := name.DeathYearValidator(v); err != nil {
			return &ValidationError{Name: "deathYear", err: fmt.Errorf(`ent: validator failed for field "Name.deathYear": %w`, err)}
		}
	}
	return nil
}

func (nu *NameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   name.Table,
			Columns: name.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: name.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Tconst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldTconst,
		})
	}
	if value, ok := nu.mutation.PrimaryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldPrimaryName,
		})
	}
	if value, ok := nu.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldBirthYear,
		})
	}
	if value, ok := nu.mutation.AddedBirthYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldBirthYear,
		})
	}
	if value, ok := nu.mutation.DeathYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldDeathYear,
		})
	}
	if value, ok := nu.mutation.AddedDeathYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldDeathYear,
		})
	}
	if value, ok := nu.mutation.PrimaryProfession(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: name.FieldPrimaryProfession,
		})
	}
	if value, ok := nu.mutation.KnownForTitles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: name.FieldKnownForTitles,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{name.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NameUpdateOne is the builder for updating a single Name entity.
type NameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NameMutation
}

// SetTconst sets the "tconst" field.
func (nuo *NameUpdateOne) SetTconst(s string) *NameUpdateOne {
	nuo.mutation.SetTconst(s)
	return nuo
}

// SetPrimaryName sets the "primaryName" field.
func (nuo *NameUpdateOne) SetPrimaryName(s string) *NameUpdateOne {
	nuo.mutation.SetPrimaryName(s)
	return nuo
}

// SetBirthYear sets the "birthYear" field.
func (nuo *NameUpdateOne) SetBirthYear(i int) *NameUpdateOne {
	nuo.mutation.ResetBirthYear()
	nuo.mutation.SetBirthYear(i)
	return nuo
}

// AddBirthYear adds i to the "birthYear" field.
func (nuo *NameUpdateOne) AddBirthYear(i int) *NameUpdateOne {
	nuo.mutation.AddBirthYear(i)
	return nuo
}

// SetDeathYear sets the "deathYear" field.
func (nuo *NameUpdateOne) SetDeathYear(i int) *NameUpdateOne {
	nuo.mutation.ResetDeathYear()
	nuo.mutation.SetDeathYear(i)
	return nuo
}

// AddDeathYear adds i to the "deathYear" field.
func (nuo *NameUpdateOne) AddDeathYear(i int) *NameUpdateOne {
	nuo.mutation.AddDeathYear(i)
	return nuo
}

// SetPrimaryProfession sets the "primaryProfession" field.
func (nuo *NameUpdateOne) SetPrimaryProfession(s []string) *NameUpdateOne {
	nuo.mutation.SetPrimaryProfession(s)
	return nuo
}

// SetKnownForTitles sets the "knownForTitles" field.
func (nuo *NameUpdateOne) SetKnownForTitles(s []string) *NameUpdateOne {
	nuo.mutation.SetKnownForTitles(s)
	return nuo
}

// Mutation returns the NameMutation object of the builder.
func (nuo *NameUpdateOne) Mutation() *NameMutation {
	return nuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NameUpdateOne) Select(field string, fields ...string) *NameUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Name entity.
func (nuo *NameUpdateOne) Save(ctx context.Context) (*Name, error) {
	var (
		err  error
		node *Name
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Name)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NameUpdateOne) SaveX(ctx context.Context) *Name {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NameUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NameUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NameUpdateOne) check() error {
	if v, ok := nuo.mutation.BirthYear(); ok {
		if err := name.BirthYearValidator(v); err != nil {
			return &ValidationError{Name: "birthYear", err: fmt.Errorf(`ent: validator failed for field "Name.birthYear": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.DeathYear(); ok {
		if err := name.DeathYearValidator(v); err != nil {
			return &ValidationError{Name: "deathYear", err: fmt.Errorf(`ent: validator failed for field "Name.deathYear": %w`, err)}
		}
	}
	return nil
}

func (nuo *NameUpdateOne) sqlSave(ctx context.Context) (_node *Name, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   name.Table,
			Columns: name.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: name.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Name.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, name.FieldID)
		for _, f := range fields {
			if !name.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != name.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Tconst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldTconst,
		})
	}
	if value, ok := nuo.mutation.PrimaryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: name.FieldPrimaryName,
		})
	}
	if value, ok := nuo.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldBirthYear,
		})
	}
	if value, ok := nuo.mutation.AddedBirthYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldBirthYear,
		})
	}
	if value, ok := nuo.mutation.DeathYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldDeathYear,
		})
	}
	if value, ok := nuo.mutation.AddedDeathYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: name.FieldDeathYear,
		})
	}
	if value, ok := nuo.mutation.PrimaryProfession(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: name.FieldPrimaryProfession,
		})
	}
	if value, ok := nuo.mutation.KnownForTitles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: name.FieldKnownForTitles,
		})
	}
	_node = &Name{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{name.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

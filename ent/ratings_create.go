// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdb-db/ent/ratings"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RatingsCreate is the builder for creating a Ratings entity.
type RatingsCreate struct {
	config
	mutation *RatingsMutation
	hooks    []Hook
}

// SetTconst sets the "tconst" field.
func (rc *RatingsCreate) SetTconst(s string) *RatingsCreate {
	rc.mutation.SetTconst(s)
	return rc
}

// SetAverageRating sets the "averageRating" field.
func (rc *RatingsCreate) SetAverageRating(f float64) *RatingsCreate {
	rc.mutation.SetAverageRating(f)
	return rc
}

// SetNumVotes sets the "numVotes" field.
func (rc *RatingsCreate) SetNumVotes(i int) *RatingsCreate {
	rc.mutation.SetNumVotes(i)
	return rc
}

// Mutation returns the RatingsMutation object of the builder.
func (rc *RatingsCreate) Mutation() *RatingsMutation {
	return rc.mutation
}

// Save creates the Ratings in the database.
func (rc *RatingsCreate) Save(ctx context.Context) (*Ratings, error) {
	var (
		err  error
		node *Ratings
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ratings)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RatingsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RatingsCreate) SaveX(ctx context.Context) *Ratings {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RatingsCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RatingsCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RatingsCreate) check() error {
	if _, ok := rc.mutation.Tconst(); !ok {
		return &ValidationError{Name: "tconst", err: errors.New(`ent: missing required field "Ratings.tconst"`)}
	}
	if _, ok := rc.mutation.AverageRating(); !ok {
		return &ValidationError{Name: "averageRating", err: errors.New(`ent: missing required field "Ratings.averageRating"`)}
	}
	if v, ok := rc.mutation.AverageRating(); ok {
		if err := ratings.AverageRatingValidator(v); err != nil {
			return &ValidationError{Name: "averageRating", err: fmt.Errorf(`ent: validator failed for field "Ratings.averageRating": %w`, err)}
		}
	}
	if _, ok := rc.mutation.NumVotes(); !ok {
		return &ValidationError{Name: "numVotes", err: errors.New(`ent: missing required field "Ratings.numVotes"`)}
	}
	return nil
}

func (rc *RatingsCreate) sqlSave(ctx context.Context) (*Ratings, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RatingsCreate) createSpec() (*Ratings, *sqlgraph.CreateSpec) {
	var (
		_node = &Ratings{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ratings.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ratings.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Tconst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ratings.FieldTconst,
		})
		_node.Tconst = value
	}
	if value, ok := rc.mutation.AverageRating(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ratings.FieldAverageRating,
		})
		_node.AverageRating = value
	}
	if value, ok := rc.mutation.NumVotes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ratings.FieldNumVotes,
		})
		_node.NumVotes = value
	}
	return _node, _spec
}

// RatingsCreateBulk is the builder for creating many Ratings entities in bulk.
type RatingsCreateBulk struct {
	config
	builders []*RatingsCreate
}

// Save creates the Ratings entities in the database.
func (rcb *RatingsCreateBulk) Save(ctx context.Context) ([]*Ratings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ratings, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RatingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RatingsCreateBulk) SaveX(ctx context.Context) []*Ratings {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RatingsCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RatingsCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

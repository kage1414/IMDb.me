// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"imdb-db/ent/name"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Name is the model entity for the Name schema.
type Name struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tconst holds the value of the "tconst" field.
	Tconst string `json:"tconst,omitempty"`
	// PrimaryName holds the value of the "primaryName" field.
	PrimaryName string `json:"primaryName,omitempty"`
	// BirthYear holds the value of the "birthYear" field.
	BirthYear int `json:"birthYear,omitempty"`
	// DeathYear holds the value of the "deathYear" field.
	DeathYear int `json:"deathYear,omitempty"`
	// PrimaryProfession holds the value of the "primaryProfession" field.
	PrimaryProfession []string `json:"primaryProfession,omitempty"`
	// KnownForTitles holds the value of the "knownForTitles" field.
	KnownForTitles []string `json:"knownForTitles,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Name) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case name.FieldPrimaryProfession, name.FieldKnownForTitles:
			values[i] = new([]byte)
		case name.FieldID, name.FieldBirthYear, name.FieldDeathYear:
			values[i] = new(sql.NullInt64)
		case name.FieldTconst, name.FieldPrimaryName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Name", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Name fields.
func (n *Name) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case name.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case name.FieldTconst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tconst", values[i])
			} else if value.Valid {
				n.Tconst = value.String
			}
		case name.FieldPrimaryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primaryName", values[i])
			} else if value.Valid {
				n.PrimaryName = value.String
			}
		case name.FieldBirthYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birthYear", values[i])
			} else if value.Valid {
				n.BirthYear = int(value.Int64)
			}
		case name.FieldDeathYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deathYear", values[i])
			} else if value.Valid {
				n.DeathYear = int(value.Int64)
			}
		case name.FieldPrimaryProfession:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field primaryProfession", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.PrimaryProfession); err != nil {
					return fmt.Errorf("unmarshal field primaryProfession: %w", err)
				}
			}
		case name.FieldKnownForTitles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field knownForTitles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.KnownForTitles); err != nil {
					return fmt.Errorf("unmarshal field knownForTitles: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Name.
// Note that you need to call Name.Unwrap() before calling this method if this Name
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Name) Update() *NameUpdateOne {
	return (&NameClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Name entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Name) Unwrap() *Name {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Name is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Name) String() string {
	var builder strings.Builder
	builder.WriteString("Name(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("tconst=")
	builder.WriteString(n.Tconst)
	builder.WriteString(", ")
	builder.WriteString("primaryName=")
	builder.WriteString(n.PrimaryName)
	builder.WriteString(", ")
	builder.WriteString("birthYear=")
	builder.WriteString(fmt.Sprintf("%v", n.BirthYear))
	builder.WriteString(", ")
	builder.WriteString("deathYear=")
	builder.WriteString(fmt.Sprintf("%v", n.DeathYear))
	builder.WriteString(", ")
	builder.WriteString("primaryProfession=")
	builder.WriteString(fmt.Sprintf("%v", n.PrimaryProfession))
	builder.WriteString(", ")
	builder.WriteString("knownForTitles=")
	builder.WriteString(fmt.Sprintf("%v", n.KnownForTitles))
	builder.WriteByte(')')
	return builder.String()
}

// Names is a parsable slice of Name.
type Names []*Name

func (n Names) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}

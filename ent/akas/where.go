// Code generated by ent, DO NOT EDIT.

package akas

import (
	"imdb-db/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TitleId applies equality check predicate on the "titleId" field. It's identical to TitleIdEQ.
func TitleId(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleId), v))
	})
}

// Ordering applies equality check predicate on the "ordering" field. It's identical to OrderingEQ.
func Ordering(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdering), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// IsOriginalTitle applies equality check predicate on the "isOriginalTitle" field. It's identical to IsOriginalTitleEQ.
func IsOriginalTitle(v bool) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOriginalTitle), v))
	})
}

// TitleIdEQ applies the EQ predicate on the "titleId" field.
func TitleIdEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleId), v))
	})
}

// TitleIdNEQ applies the NEQ predicate on the "titleId" field.
func TitleIdNEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitleId), v))
	})
}

// TitleIdIn applies the In predicate on the "titleId" field.
func TitleIdIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitleId), v...))
	})
}

// TitleIdNotIn applies the NotIn predicate on the "titleId" field.
func TitleIdNotIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitleId), v...))
	})
}

// TitleIdGT applies the GT predicate on the "titleId" field.
func TitleIdGT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitleId), v))
	})
}

// TitleIdGTE applies the GTE predicate on the "titleId" field.
func TitleIdGTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitleId), v))
	})
}

// TitleIdLT applies the LT predicate on the "titleId" field.
func TitleIdLT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitleId), v))
	})
}

// TitleIdLTE applies the LTE predicate on the "titleId" field.
func TitleIdLTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitleId), v))
	})
}

// TitleIdContains applies the Contains predicate on the "titleId" field.
func TitleIdContains(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitleId), v))
	})
}

// TitleIdHasPrefix applies the HasPrefix predicate on the "titleId" field.
func TitleIdHasPrefix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitleId), v))
	})
}

// TitleIdHasSuffix applies the HasSuffix predicate on the "titleId" field.
func TitleIdHasSuffix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitleId), v))
	})
}

// TitleIdEqualFold applies the EqualFold predicate on the "titleId" field.
func TitleIdEqualFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitleId), v))
	})
}

// TitleIdContainsFold applies the ContainsFold predicate on the "titleId" field.
func TitleIdContainsFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitleId), v))
	})
}

// OrderingEQ applies the EQ predicate on the "ordering" field.
func OrderingEQ(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdering), v))
	})
}

// OrderingNEQ applies the NEQ predicate on the "ordering" field.
func OrderingNEQ(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrdering), v))
	})
}

// OrderingIn applies the In predicate on the "ordering" field.
func OrderingIn(vs ...int) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrdering), v...))
	})
}

// OrderingNotIn applies the NotIn predicate on the "ordering" field.
func OrderingNotIn(vs ...int) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrdering), v...))
	})
}

// OrderingGT applies the GT predicate on the "ordering" field.
func OrderingGT(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrdering), v))
	})
}

// OrderingGTE applies the GTE predicate on the "ordering" field.
func OrderingGTE(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrdering), v))
	})
}

// OrderingLT applies the LT predicate on the "ordering" field.
func OrderingLT(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrdering), v))
	})
}

// OrderingLTE applies the LTE predicate on the "ordering" field.
func OrderingLTE(v int) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrdering), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Akas {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Akas(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// IsOriginalTitleEQ applies the EQ predicate on the "isOriginalTitle" field.
func IsOriginalTitleEQ(v bool) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsOriginalTitle), v))
	})
}

// IsOriginalTitleNEQ applies the NEQ predicate on the "isOriginalTitle" field.
func IsOriginalTitleNEQ(v bool) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsOriginalTitle), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Akas) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Akas) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Akas) predicate.Akas {
	return predicate.Akas(func(s *sql.Selector) {
		p(s.Not())
	})
}
